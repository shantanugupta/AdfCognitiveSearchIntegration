using Cocona;
using OmsCli;
using OmsCli.AdfManager;
using OmsCli.AzureManager;
using Serilog;
using Serilog.Core;
using Serilog.Events;

internal class Program
{
    private static void Main(string[] args)
    {
        _ = new
        Settings();

        var levelSwitch = new LoggingLevelSwitch
        {
            MinimumLevel = LogEventLevel.Verbose
        };

        Log.Logger = new LoggerConfiguration()
             .MinimumLevel.ControlledBy(levelSwitch)
             .WriteTo.Console()
             .WriteTo.File(@"log.txt", rollingInterval: RollingInterval.Day)
            .CreateLogger();

        var app = CoconaApp.Create(); // is a shorthand for `CoconaApp.CreateBuilder().Build()`

        app.AddCommand("menu", Menu);
        app.AddCommand("generate", GenerateAndLoadData);
        app.AddCommand("trigger", TriggerPipeline);
        app.AddCommand("monitor", Monitor);
        app.AddCommand("search", Search);

        //app.Run();
        Menu();
    }


    #region Command methods

    [Command(name: "menu", Description = "Open menu")]
    private static void Menu()
    {
        while (true)
        {
            try
            {
                Console.Clear();
                Console.WriteLine("Order Management System Menu");
                Console.WriteLine("1. Generate random data and trigger ADF pipeline");
                Console.WriteLine("2. Trigger pipeline");
                Console.WriteLine("3. Monitor ADF Pipeline");
                Console.WriteLine("4. Search");
                Console.WriteLine("5. Exit");

                Console.Write("Enter your choice (1-5): ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        GenerateAndLoadData();
                        break;
                    case "2":
                        TriggerPipeline();
                        break;
                    case "3":
                        Console.WriteLine("Enter pipeline runId: ");
                        string pipeline = Console.ReadLine();
                        Monitor(pipeline);
                        break;
                    case "4":
                        Search();
                        break;
                    case "5":
                        Environment.Exit(0);
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Please enter a valid option.");
                        break;
                }

                Console.WriteLine("Press any key to continue...");
                Console.ReadKey();
            }
            catch (ApplicationException ex)
            {
                Log.Error(ex.Message, ex);
            }
        }
    }

    [Command(name: "search", Description = "Perform a search on index")]
    private static void Search(
        [Argument(name:"i", Description = "Index name")]
        string? indexName = "products-index")
    {
        try
        {
            Console.WriteLine("Enter product name to search: ");
            string searchText = Console.ReadLine();
            SearchManager.Search(indexName, searchText);
        }
        catch (ApplicationException ex)
        {
            Log.Error(ex.Message, ex);
        }
    }

    [Command(name: "monitor", Description = "Monitor the pipeline")]
    private static void Monitor(
        [Argument("r", Description = "Pipeline run id generated by triggering the pipeline")]
        string? runId,
        [Argument("p", Description = "Pipeline name")]
        string? pipelineName = AdfManager.PIPELINE)
    {
        try
        {
            AdfManager.MonitorPipeline(runId, pipelineName);
        }
        catch (ApplicationException ex)
        {
            Log.Error(ex.Message, ex);
        }
    }

    [Command(name: "generate", Description = "Generate data in csv and json format and uploads the same into azure blob")]
    private static void GenerateAndLoadData(
        [Argument("s", Description = "Number of categories to generate")] int seed = 100
    )
    {
        try
        {
            DataGenerator dg = new DataGenerator(seed);
            dg.Generate();
        }
        catch (ApplicationException ex)
        {
            Log.Error(ex.Message, ex);
        }
    }

    [Command(name: "trigger", Description = "Trigger ADF pipeline")]
    private static string TriggerPipeline(
        [Argument("p", Description = "Pipeline name")]
        string pipelineName = AdfManager.PIPELINE)
    {
        string runId = "";
        try
        {
            var pipelineRunId = AdfManager.TriggerPipeline(pipelineName, null);
            runId = pipelineRunId.Value.RunId.ToString();
        }
        catch (ApplicationException ex)
        {
            Log.Error(ex.Message, ex);
        }
        return runId;
    }

    #endregion
}